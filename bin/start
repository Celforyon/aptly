#!/bin/bash

. /usr/local/bin/common

function f_greprepo() {
	repo list -raw|grep -E "^$1$"
}

function f_greppublished() {
	publish list -raw|cut -d' ' -f2|grep -E "^$1$"
}

function f_repocheck() {
	dist=$1
	if [ -z "$(f_greprepo ${dist})" ]; then
		if [ "${AUTO_CREATE_REPO}" = "true" ]; then
			repo create "${dist}"
		else
			log "error: trying to add package to non-existing repo ${dist}"
			echo err
		fi
	fi
}

function f_publish() {
	dist=$1
	sname=$2

	if [ -z "$(f_greppublished ${dist})" ]; then
		publish snapshot "${sname}"
	else
		publish switch "${dist}" "${sname}"
	fi
	return $?
}

function f_process() {
	path=$1
	filename=$(basename "${path}")
	ext="${filename##*.}"
	if [ "${ext}" = "deb" ]; then
		dist=$(basename $(dirname ${path}))
		state=$(f_repocheck "${dist}")
		if [ -z "${state}" ]; then
			if [ ! -f "debs/${dist}/${filename}" ]; then
				if repo add "${dist}" "${path}"; then
					sname="${dist}-$(date '+%Y%m%d_%s')-${RANDOM}"

					if snapshot create "${sname}" from repo "${dist}"; then
						if f_publish "${dist}" "${sname}"; then
							[ ! -d "debs/${dist}" ] && mkdir -p "debs/${dist}"
							cp "${path}" "debs/${dist}/${filename}"
							log "info: published debs/${dist}/${filename}"
						fi
					fi
				fi
			else
				log "warning: this package already exists (debs/${dist}/${filename})"
			fi
		fi
	else
		log "error: ignoring file ${filename} (bad extension: ${ext})"
	fi
	rm -f "${path}"												# remove file
	rmdir "$(dirname ${path})"						# remove supposedly dist
	rmdir "$(dirname $(dirname ${path}))" # remove temporary created dir
}

if [ ! -r private.key ]; then
	log "fatal error: no private.key file"
	exit 1
fi

if gpg1 --batch --no-tty --import private.key; then
	grep -q 'no-tty' ~/.gnupg/gpg.conf||echo>>~/.gnupg/gpg.conf 'no-tty'
else
	log "fatal error: cannot import private.key file"
	exit 1
fi

[ -n "${PASSPHRASE}" ] && echo>passphrase "${PASSPHRASE}"
if [ ! -r passphrase ]; then
	log "fatal error: no passphrase"
	exit 1
fi

chown root: passphrase
chmod 000 passphrase

inotifywait -rme CLOSE_WRITE --format '%w%f' /shared|while read line; do
	log "info: CLOSE_WRITE ${line}"
	f_process "${line}"
done
